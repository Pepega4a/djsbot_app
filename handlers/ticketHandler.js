const { ChannelType, PermissionFlagsBits, AttachmentBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const supabase = require('../supabase');
const fs = require('fs');
const path = require('path');

const TICKET_CATEGORY_ID = '1349333248504893460'; // ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤
const ROLE_ADMIN = '1349315054327038013'; // ID —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
const ARCHIVE_CHANNEL_ID = '1349345544992067595'; // –ö–∞–Ω–∞–ª, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∞—Ä—Ö–∏–≤—ã

module.exports = async (interaction) => {
    const user = interaction.user;
    const guild = interaction.guild;

    // üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤
    if (interaction.customId.startsWith('ticket_')) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç
        const { data: existingTickets } = await supabase
            .from('tickets')
            .select('*')
            .eq('discord_id', user.id)
            .eq('status', 'open');

        if (existingTickets.length > 0) {
            return interaction.reply({ content: '‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç!', ephemeral: true });
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É —Ç–∏–∫–µ—Ç–∞
        let ticketName, topic;
        switch (interaction.customId) {
            case 'ticket_general':
                ticketName = `ticket-${user.username}`;
                topic = '–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å';
                break;
            case 'ticket_support':
                ticketName = `support-${user.username}`;
                topic = '–ü–æ–¥–¥–µ—Ä–∂–∫–∞';
                break;
            case 'ticket_purchase':
                ticketName = `purchase-${user.username}`;
                topic = '–ü–æ–∫—É–ø–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏';
                break;
            default:
                return;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª —Ç–∏–∫–µ—Ç–∞
        const ticketChannel = await guild.channels.create({
            name: ticketName,
            type: ChannelType.GuildText,
            parent: TICKET_CATEGORY_ID,
            topic: `–¢–∏–∫–µ—Ç –æ—Ç ${user.username}: ${topic}`,
            permissionOverwrites: [
                {
                    id: guild.roles.everyone.id,
                    deny: [PermissionFlagsBits.ViewChannel]
                },
                {
                    id: user.id,
                    allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages]
                },
                {
                    id: ROLE_ADMIN,
                    allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages]
                }
            ]
        });

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç –≤ Supabase
        const { error } = await supabase
            .from('tickets')
            .insert([{ discord_id: user.id, ticket_id: ticketChannel.id, category: topic, status: 'open' }]);

        if (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Supabase:', error);
            return interaction.reply({ content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞.', ephemeral: true });
        }

        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞
        const closeButton = new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId('close_ticket')
                .setLabel('‚ùå –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç')
                .setStyle(ButtonStyle.Danger)
        );

        await ticketChannel.send({ content: `üé´ **${user}, –≤–∞—à —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω!**\n–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É.`, components: [closeButton] });

        interaction.reply({ content: `‚úÖ –í–∞—à —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω: ${ticketChannel}`, ephemeral: true });
    }

    // üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞
    if (interaction.customId === 'close_ticket') {
        const channel = interaction.channel;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª —Ç–∏–∫–µ—Ç–æ–º
        const { data: ticket } = await supabase
            .from('tickets')
            .select('*')
            .eq('ticket_id', channel.id)
            .eq('status', 'open')
            .single();

        if (!ticket) {
            return interaction.reply({ content: '‚ùå –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–∏–∫–µ—Ç–æ–º!', ephemeral: true });
        }

        // üìå –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
        let messages = await channel.messages.fetch({ limit: 100 });
        messages = messages.sort((a, b) => a.createdTimestamp - b.createdTimestamp);

        let logContent = `<html><head><title>Ticket Archive</title></head><body>`;
        logContent += `<h2>–ê—Ä—Ö–∏–≤ —Ç–∏–∫–µ—Ç–∞: ${channel.name}</h2><hr>`;

        messages.forEach(msg => {
            logContent += `<p><strong>${msg.author.username}:</strong> ${msg.content} <em>[${new Date(msg.createdTimestamp).toLocaleString()}]</em></p>`;
        });

        logContent += `</body></html>`;

        // üìå –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª (–≤—Ä–µ–º–µ–Ω–Ω—ã–π)
        const fileName = `ticket_${channel.id}.html`;
        const filePath = path.join(__dirname, '../temp', fileName);

        if (!fs.existsSync(path.join(__dirname, '../temp'))) {
            fs.mkdirSync(path.join(__dirname, '../temp'), { recursive: true });
        }

        fs.writeFileSync(filePath, logContent);

        // üìå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∫–∞–Ω–∞–ª –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
        const archiveChannel = await guild.channels.fetch(ARCHIVE_CHANNEL_ID);
        if (archiveChannel) {
            const fileAttachment = new AttachmentBuilder(filePath);
            await archiveChannel.send({ content: `üìÇ –ê—Ä—Ö–∏–≤ —Ç–∏–∫–µ—Ç–∞: **${channel.name}**`, files: [fileAttachment] });
        }

        // üìå –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        fs.unlinkSync(filePath);

        // üìå –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –≤ Supabase
        const { error: updateError } = await supabase
            .from('tickets')
            .update({ status: 'closed' })
            .eq('ticket_id', channel.id);

        if (updateError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞ –≤ Supabase:', updateError);
            return interaction.reply({ content: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞.', ephemeral: true });
        }

        // üìå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
        await interaction.reply({ content: '‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω.', ephemeral: true });

        // –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => channel.delete().catch(console.error), 5000);
    }
};
